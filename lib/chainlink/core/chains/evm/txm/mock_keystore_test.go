// Code generated by mockery v2.53.0. DO NOT EDIT.

package txm

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// mockKeystore is an autogenerated mock type for the Keystore type
type mockKeystore struct {
	mock.Mock
}

type mockKeystore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockKeystore) EXPECT() *mockKeystore_Expecter {
	return &mockKeystore_Expecter{mock: &_m.Mock}
}

// EnabledAddressesForChain provides a mock function with given fields: ctx, chainID
func (_m *mockKeystore) EnabledAddressesForChain(ctx context.Context, chainID *big.Int) ([]common.Address, error) {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for EnabledAddressesForChain")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) ([]common.Address, error)); ok {
		return rf(ctx, chainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) []common.Address); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockKeystore_EnabledAddressesForChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnabledAddressesForChain'
type mockKeystore_EnabledAddressesForChain_Call struct {
	*mock.Call
}

// EnabledAddressesForChain is a helper method to define mock.On call
//   - ctx context.Context
//   - chainID *big.Int
func (_e *mockKeystore_Expecter) EnabledAddressesForChain(ctx interface{}, chainID interface{}) *mockKeystore_EnabledAddressesForChain_Call {
	return &mockKeystore_EnabledAddressesForChain_Call{Call: _e.mock.On("EnabledAddressesForChain", ctx, chainID)}
}

func (_c *mockKeystore_EnabledAddressesForChain_Call) Run(run func(ctx context.Context, chainID *big.Int)) *mockKeystore_EnabledAddressesForChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*big.Int))
	})
	return _c
}

func (_c *mockKeystore_EnabledAddressesForChain_Call) Return(addresses []common.Address, err error) *mockKeystore_EnabledAddressesForChain_Call {
	_c.Call.Return(addresses, err)
	return _c
}

func (_c *mockKeystore_EnabledAddressesForChain_Call) RunAndReturn(run func(context.Context, *big.Int) ([]common.Address, error)) *mockKeystore_EnabledAddressesForChain_Call {
	_c.Call.Return(run)
	return _c
}

// newMockKeystore creates a new instance of mockKeystore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockKeystore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockKeystore {
	mock := &mockKeystore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
