// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: telem_streams.proto

package telem

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LLOBridgeTelemetry struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	BridgeAdapterName        string                 `protobuf:"bytes,1,opt,name=bridge_adapter_name,json=bridgeAdapterName,proto3" json:"bridge_adapter_name,omitempty"`
	BridgeRequestData        []byte                 `protobuf:"bytes,2,opt,name=bridge_request_data,json=bridgeRequestData,proto3" json:"bridge_request_data,omitempty"`
	BridgeResponseData       []byte                 `protobuf:"bytes,3,opt,name=bridge_response_data,json=bridgeResponseData,proto3" json:"bridge_response_data,omitempty"`
	BridgeResponseError      *string                `protobuf:"bytes,4,opt,name=bridge_response_error,json=bridgeResponseError,proto3,oneof" json:"bridge_response_error,omitempty"`
	BridgeResponseStatusCode int32                  `protobuf:"varint,5,opt,name=bridge_response_status_code,json=bridgeResponseStatusCode,proto3" json:"bridge_response_status_code,omitempty"`
	RequestStartTimestamp    int64                  `protobuf:"varint,6,opt,name=request_start_timestamp,json=requestStartTimestamp,proto3" json:"request_start_timestamp,omitempty"`
	RequestFinishTimestamp   int64                  `protobuf:"varint,7,opt,name=request_finish_timestamp,json=requestFinishTimestamp,proto3" json:"request_finish_timestamp,omitempty"`
	LocalCacheHit            bool                   `protobuf:"varint,8,opt,name=local_cache_hit,json=localCacheHit,proto3" json:"local_cache_hit,omitempty"`
	SpecId                   int32                  `protobuf:"varint,9,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	StreamId                 *uint32                `protobuf:"varint,10,opt,name=stream_id,json=streamId,proto3,oneof" json:"stream_id,omitempty"`
	DotId                    string                 `protobuf:"bytes,11,opt,name=dot_id,json=dotId,proto3" json:"dot_id,omitempty"`
	DonId                    uint32                 `protobuf:"varint,12,opt,name=don_id,json=donId,proto3" json:"don_id,omitempty"`
	SeqNr                    uint64                 `protobuf:"varint,13,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	ConfigDigest             []byte                 `protobuf:"bytes,14,opt,name=config_digest,json=configDigest,proto3" json:"config_digest,omitempty"`
	ObservationTimestamp     int64                  `protobuf:"varint,15,opt,name=observation_timestamp,json=observationTimestamp,proto3" json:"observation_timestamp,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *LLOBridgeTelemetry) Reset() {
	*x = LLOBridgeTelemetry{}
	mi := &file_telem_streams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOBridgeTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOBridgeTelemetry) ProtoMessage() {}

func (x *LLOBridgeTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_telem_streams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOBridgeTelemetry.ProtoReflect.Descriptor instead.
func (*LLOBridgeTelemetry) Descriptor() ([]byte, []int) {
	return file_telem_streams_proto_rawDescGZIP(), []int{0}
}

func (x *LLOBridgeTelemetry) GetBridgeAdapterName() string {
	if x != nil {
		return x.BridgeAdapterName
	}
	return ""
}

func (x *LLOBridgeTelemetry) GetBridgeRequestData() []byte {
	if x != nil {
		return x.BridgeRequestData
	}
	return nil
}

func (x *LLOBridgeTelemetry) GetBridgeResponseData() []byte {
	if x != nil {
		return x.BridgeResponseData
	}
	return nil
}

func (x *LLOBridgeTelemetry) GetBridgeResponseError() string {
	if x != nil && x.BridgeResponseError != nil {
		return *x.BridgeResponseError
	}
	return ""
}

func (x *LLOBridgeTelemetry) GetBridgeResponseStatusCode() int32 {
	if x != nil {
		return x.BridgeResponseStatusCode
	}
	return 0
}

func (x *LLOBridgeTelemetry) GetRequestStartTimestamp() int64 {
	if x != nil {
		return x.RequestStartTimestamp
	}
	return 0
}

func (x *LLOBridgeTelemetry) GetRequestFinishTimestamp() int64 {
	if x != nil {
		return x.RequestFinishTimestamp
	}
	return 0
}

func (x *LLOBridgeTelemetry) GetLocalCacheHit() bool {
	if x != nil {
		return x.LocalCacheHit
	}
	return false
}

func (x *LLOBridgeTelemetry) GetSpecId() int32 {
	if x != nil {
		return x.SpecId
	}
	return 0
}

func (x *LLOBridgeTelemetry) GetStreamId() uint32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *LLOBridgeTelemetry) GetDotId() string {
	if x != nil {
		return x.DotId
	}
	return ""
}

func (x *LLOBridgeTelemetry) GetDonId() uint32 {
	if x != nil {
		return x.DonId
	}
	return 0
}

func (x *LLOBridgeTelemetry) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *LLOBridgeTelemetry) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *LLOBridgeTelemetry) GetObservationTimestamp() int64 {
	if x != nil {
		return x.ObservationTimestamp
	}
	return 0
}

// LLOObservationTelemetry packet sent for each stream on every call to
// Observation (once per round)
type LLOObservationTelemetry struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	StreamId              uint32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StreamValueType       int32                  `protobuf:"varint,2,opt,name=stream_value_type,json=streamValueType,proto3" json:"stream_value_type,omitempty"`
	StreamValueBinary     []byte                 `protobuf:"bytes,3,opt,name=stream_value_binary,json=streamValueBinary,proto3" json:"stream_value_binary,omitempty"`
	StreamValueText       string                 `protobuf:"bytes,4,opt,name=stream_value_text,json=streamValueText,proto3" json:"stream_value_text,omitempty"`
	ObservationError      *string                `protobuf:"bytes,5,opt,name=observation_error,json=observationError,proto3,oneof" json:"observation_error,omitempty"`
	ObservationTimestamp  int64                  `protobuf:"varint,6,opt,name=observation_timestamp,json=observationTimestamp,proto3" json:"observation_timestamp,omitempty"`
	ObservationFinishedAt int64                  `protobuf:"varint,7,opt,name=observation_finished_at,json=observationFinishedAt,proto3" json:"observation_finished_at,omitempty"`
	DonId                 uint32                 `protobuf:"varint,8,opt,name=don_id,json=donId,proto3" json:"don_id,omitempty"`
	SeqNr                 uint64                 `protobuf:"varint,9,opt,name=seq_nr,json=seqNr,proto3" json:"seq_nr,omitempty"`
	ConfigDigest          []byte                 `protobuf:"bytes,10,opt,name=config_digest,json=configDigest,proto3" json:"config_digest,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LLOObservationTelemetry) Reset() {
	*x = LLOObservationTelemetry{}
	mi := &file_telem_streams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLOObservationTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLOObservationTelemetry) ProtoMessage() {}

func (x *LLOObservationTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_telem_streams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLOObservationTelemetry.ProtoReflect.Descriptor instead.
func (*LLOObservationTelemetry) Descriptor() ([]byte, []int) {
	return file_telem_streams_proto_rawDescGZIP(), []int{1}
}

func (x *LLOObservationTelemetry) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *LLOObservationTelemetry) GetStreamValueType() int32 {
	if x != nil {
		return x.StreamValueType
	}
	return 0
}

func (x *LLOObservationTelemetry) GetStreamValueBinary() []byte {
	if x != nil {
		return x.StreamValueBinary
	}
	return nil
}

func (x *LLOObservationTelemetry) GetStreamValueText() string {
	if x != nil {
		return x.StreamValueText
	}
	return ""
}

func (x *LLOObservationTelemetry) GetObservationError() string {
	if x != nil && x.ObservationError != nil {
		return *x.ObservationError
	}
	return ""
}

func (x *LLOObservationTelemetry) GetObservationTimestamp() int64 {
	if x != nil {
		return x.ObservationTimestamp
	}
	return 0
}

func (x *LLOObservationTelemetry) GetObservationFinishedAt() int64 {
	if x != nil {
		return x.ObservationFinishedAt
	}
	return 0
}

func (x *LLOObservationTelemetry) GetDonId() uint32 {
	if x != nil {
		return x.DonId
	}
	return 0
}

func (x *LLOObservationTelemetry) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *LLOObservationTelemetry) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

var File_telem_streams_proto protoreflect.FileDescriptor

var file_telem_streams_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x22, 0xba, 0x05, 0x0a,
	0x12, 0x4c, 0x4c, 0x4f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x15, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x1b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x18, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x70, 0x65, 0x63, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x15,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0xc6, 0x03, 0x0a, 0x17, 0x4c, 0x4c,
	0x4f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x15,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69,
	0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6c, 0x6f,
	0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_telem_streams_proto_rawDescOnce sync.Once
	file_telem_streams_proto_rawDescData []byte
)

func file_telem_streams_proto_rawDescGZIP() []byte {
	file_telem_streams_proto_rawDescOnce.Do(func() {
		file_telem_streams_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_telem_streams_proto_rawDesc), len(file_telem_streams_proto_rawDesc)))
	})
	return file_telem_streams_proto_rawDescData
}

var file_telem_streams_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_telem_streams_proto_goTypes = []any{
	(*LLOBridgeTelemetry)(nil),      // 0: telem.LLOBridgeTelemetry
	(*LLOObservationTelemetry)(nil), // 1: telem.LLOObservationTelemetry
}
var file_telem_streams_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_telem_streams_proto_init() }
func file_telem_streams_proto_init() {
	if File_telem_streams_proto != nil {
		return
	}
	file_telem_streams_proto_msgTypes[0].OneofWrappers = []any{}
	file_telem_streams_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_telem_streams_proto_rawDesc), len(file_telem_streams_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telem_streams_proto_goTypes,
		DependencyIndexes: file_telem_streams_proto_depIdxs,
		MessageInfos:      file_telem_streams_proto_msgTypes,
	}.Build()
	File_telem_streams_proto = out.File
	file_telem_streams_proto_goTypes = nil
	file_telem_streams_proto_depIdxs = nil
}
